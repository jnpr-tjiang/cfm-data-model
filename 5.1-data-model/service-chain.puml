@startuml


class domain << (I, #FF7700) Identity>> {
}

class project << (I, #FF7700) Identity>> {
}

class global_system_config << (I, #FF7700) Identity>> {
}

class service_template << (I, #FF7700) Identity>> {
  - properties: [
      - version: int
      - service_mode: enum
            [ transparent | in-network | in-network-nat ]
      - service_type: enum
            [ firewall | analyzer | source-nat | loadbalancer ]
      - image_name: string
      - service_scaling: boolean
      - interface_type: list of ServiceTemplateInterfaceType [
            - service_interface_type: enum
                  [ mgt | left | right | other ]
            - shared_ip: boolean
            - static_route_enable: boolean
      ]
      - flavor: string
      - service_virtualization_type: enum
            [ virtual-machine | network-namespace | vrouter-instance | phyysical_device ]
      - availability_zone_enable: boolean
      - vrouter_instance_type: enum
            [ libvert-qemu | docker ]
      - instance_data: string
  ]
}

class service_instance << (I, #FF7700) Identity>> {
  - properties: ServiceInstanceType [
      - auto_policy: boolean
      - availability_zone: string
      - interface_list: List of ServiceInstanceInterfaceType [
            - virtual_network: string
            - ip_address: IpAddressType
            - static_routes: RouteTableType
            - allowed_address_pairs: list of AllowedAddressPair [
                  - ip: SubnetType
                  - mac: string
                  - address_mode: enum
                        [ active-active | active-standby ]
            ]
      ]
      - scale_out: ServiceScaleOutType
      - ha-mode: enum
            [ active-active | active-standby ]
      - virtual_router_id: UUID
  ]
  - bindings: list<KeyValuePair>
}

class service_appliance_set << (I, #FF7700) Identity>> {
  - properties: List<KeyValuePair>
  - service_appliance_driver: string
  - ha_mode: "active-active" or "active-standby"
}

class service_appliance << (I, #FF7700) Identity>> {
  - user_credential: UserCredentials
  - ip_address: IpAddressType
  - properties: List<KeyValuePair>
}

class physical_router << (I, #FF7700) Identity>> {
}

class physical_interface << (I, #FF7700) Identity>> {
}

class virtual_machine << (I, #FF7700) Identity>> {
}

class port_tuple << (I, #FF7700) Identity>> {
}

class virtual_network << (I, #FF7700) Identity>> {
}

class virtual_machine_interface << (I, #FF7700) Identity>> {
}

class logical_router << (I, #FF7700) Identity>> {
  - gateway_external: boolean
}

class  ServiceApplianceInterfaceType << (T, #FF7700) ComplexType >> #lightblue {
  - interface_type: pattern
      - management
      - left
      - right
      - other[0-9]
}

class  ServiceInterfaceTag << (T, #FF7700) ComplexType >> #lightblue {
  - interface_type: ServiceInterfaceType<pattern>
      - management
      - left
      - right
      - other[0-9]
}

class  LogicalRouterVirtualNetworkType << (T, #FF7700) ComplexType >> #lightblue {
  - virtual_network_type: <b>enum
        - ExternalGateway
        - InternalVirtualNetwork
}

domain "1" *- "n" service_template
domain "1" *-- "n" project

project "1 " *-- "n  " service_instance
project *--- network_ipam
project *-- virtual_network
project *-- virtual_machine_interface
project *-- logical_router
logical_router --> virtual_network
(logical_router, virtual_network) . LogicalRouterVirtualNetworkType
logical_router <-- virtual_network
logical_router --> virtual_machine_interface
router_target <- logical_router
route_table <- logical_router

physical_router <-- logical_router


virtual_machine_interface -> virtual_network
virtual_network --> network_ipam

service_instance --> service_template

global_system_config *-- service_appliance_set
global_system_config *-- physical_router

physical_router *-- physical_interface

service_appliance_set *-- service_appliance
service_appliance_set <--- service_template

service_appliance -> physical_interface
ServiceApplianceInterfaceType .. (service_appliance, physical_interface)
virtual_machine --> service_instance
service_instance --> instance_ip
(service_instance, instance_ip) .. ServiceInterfaceTag: shared_ip

port_tuple --* service_instance
physical_interface <-- port_tuple

network_ipam <-- instance_ip
@enduml